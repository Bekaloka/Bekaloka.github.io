document.addEventListener('DOMContentLoaded', () => {
    const elementsContainer = document.getElementById('elements-container');
    const slot1 = document.getElementById('slot1');
    const slot2 = document.getElementById('slot2');
    const resultElement = document.getElementById('result-element');
    const resetButton = document.getElementById('reset-button');
    const addCustomButton = document.getElementById('add-custom-button');
    const apiKeyInput = document.getElementById('api-key-input');
    const saveApiKeyButton = document.getElementById('save-api-key-button');
    const apiKeyStatus = document.getElementById('api-key-status');

    let currentApiKey = '';
    const API_BASE_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-lite-preview-06-17:generateContent?key=`;

    // –ù–∞—á–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const initialElements = new Set(['üî• –û–≥–æ–Ω—å', 'üíß –í–æ–¥–∞', 'üå¨Ô∏è –í–µ—Ç–µ—Ä', 'üåé –ü–ª–∞–Ω–µ—Ç–∞ –ó–µ–º–ª—è', 'üå± –†–∞—Å—Ç–µ–Ω–∏–µ', 'üß¨ –ñ–∏–∑–Ω—å', 'ü¶† –í–∏—Ä—É—Å', 'üí® –ö–∏—Å–ª–æ—Ä–æ–¥', 'üò° –ó–ª–æ—Å—Ç—å', 'üòä –†–∞–¥–æ—Å—Ç—å']);
    let discoveredElements = new Set();
    let selectedElements = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
    function saveElements() {
        localStorage.setItem('infiniteCraftElements', JSON.stringify(Array.from(discoveredElements)));
    }

    function loadElements() {
        const savedElements = localStorage.getItem('infiniteCraftElements');
        if (savedElements) {
            discoveredElements = new Set(JSON.parse(savedElements));
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—á–∞–ª—å–Ω—ã–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        if (discoveredElements.size === 0 || !Array.from(initialElements).every(item => discoveredElements.has(item))) {
            discoveredElements = new Set(initialElements);
            saveElements();
        }
        renderElements();

        // –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞
        const savedApiKey = localStorage.getItem('geminiApiKey');
        if (savedApiKey) {
            currentApiKey = savedApiKey;
            apiKeyInput.value = savedApiKey;
            apiKeyStatus.textContent = '–ö–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω.';
            apiKeyStatus.style.color = 'green';
        } else {
            apiKeyStatus.textContent = '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ.';
            apiKeyStatus.style.color = 'orange';
        }
    }

    // --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
    function createElementDiv(name) {
        const elementDiv = document.createElement('div');
        elementDiv.className = 'element';
        elementDiv.textContent = name;
        elementDiv.addEventListener('click', () => handleElementClick(name, elementDiv));
        return elementDiv;
    }

    function renderElements() {
        elementsContainer.innerHTML = '';
        Array.from(discoveredElements).sort((a, b) => a.localeCompare(b)).forEach(name => {
            elementsContainer.appendChild(createElementDiv(name));
        });
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º ---
    async function handleElementClick(name, elementDiv) {
        if (!currentApiKey) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–∞—à API –∫–ª—é—á!');
            return;
        }

        if (selectedElements.length === 0) {
            // –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            selectedElements.push(name);
            slot1.textContent = name;
            elementDiv.classList.add('selected');
            resultElement.textContent = ''; // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        } else if (selectedElements.length === 1) {
            // –í—ã–±—Ä–∞–Ω –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç
            selectedElements.push(name);
            slot2.textContent = name;
            elementDiv.classList.add('selected');
            
            // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
            await combineElements(selectedElements[0], selectedElements[1]);

            // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Å–ª–æ—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            selectedElements = [];
            document.querySelectorAll('.element.selected').forEach(el => el.classList.remove('selected'));
            slot1.textContent = '';
            slot2.textContent = '';
        } else {
            // –ï—Å–ª–∏ —É–∂–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–±—Ä–∞–Ω—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            selectedElements = [];
            document.querySelectorAll('.element.selected').forEach(el => el.classList.remove('selected'));
            slot1.textContent = '';
            slot2.textContent = '';
            resultElement.textContent = '';
            handleElementClick(name, elementDiv); // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –ø–µ—Ä–≤—ã–π
        }
    }

    // --- –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
    async function combineElements(el1, el2) {
        resultElement.textContent = '–°–º–µ—à–∏–≤–∞–µ–º...';

        const prompt = `–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è, –µ—Å–ª–∏ —Å–º–µ—à–∞—Ç—å ${el1} –∏ ${el2}? –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ –ª–æ–≥–∏–∫–µ –∞–ª—Ö–∏–º–∏–∏ –∏ —Å–≤–æ–π—Å—Ç–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ª–æ–≥–∏—á–Ω–æ–µ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ—Å–Ω–æ —Å–≤—è–∑–∞–Ω —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—é, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é. –ò–∑–±–µ–≥–∞–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö, —Å–ª–∏—à–∫–æ–º –æ–±—â–∏—Ö –∏–ª–∏ —É–º–Ω–æ–∂–∞—é—â–∏—Ö –ø–æ–Ω—è—Ç–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª–µ–µ –ø—Ä—è–º–æ–µ –∞–ª—Ö–∏–º–∏—á–µ—Å–∫–æ–µ —Å–ª–µ–¥—Å—Ç–≤–∏–µ. –í –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å—Ç–∞–≤—å –æ–¥–Ω–æ —ç–º–æ–¥–∑–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –Ω–æ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 5 —Å–ª–æ–≤. –ï—Å–ª–∏ –ª–æ–≥–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –¥–æ–ø—É—Å–∫–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –∞–±—Å—É—Ä–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å–≤—è–∑—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –¢—ã ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å –∞–ª—Ö–∏–º–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ https://neal.fun/infinite-craft/.';
        try {
            const response = await fetch(API_BASE_URL + currentApiKey, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{ text: prompt }]
                    }]
                })
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.statusText}`);
            }

            const data = await response.json();
            const newElementName = data.candidates[0].content.parts[0].text.trim().replace(/\n/g, '');

            if (newElementName) {
                resultElement.textContent = newElementName;
                if (!discoveredElements.has(newElementName)) {
                    discoveredElements.add(newElementName);
                    saveElements();
                    renderElements();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–ª—Ö–∏–º–∏–∏:', error);
            resultElement.textContent = '–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.';
        }
    }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
    resetButton.addEventListener('click', () => {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å? –í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            localStorage.removeItem('infiniteCraftElements');
            discoveredElements = new Set(initialElements);
            saveElements();
            renderElements();
            slot1.textContent = '';
            slot2.textContent = '';
            resultElement.textContent = '';
            selectedElements = [];
        }
    });

    addCustomButton.addEventListener('click', () => {
        const customElementName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å —ç–º–æ–¥–∑–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üåü –ó–≤–µ–∑–¥–∞):');
        if (customElementName && customElementName.trim() !== '') {
            if (!discoveredElements.has(customElementName)) {
                discoveredElements.add(customElementName);
                saveElements();
                renderElements();
            } else {
                alert('–≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            }
        } else {
            alert('–ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
        }
    });

    saveApiKeyButton.addEventListener('click', () => {
        const key = apiKeyInput.value.trim();
        if (key) {
            localStorage.setItem('geminiApiKey', key);
            currentApiKey = key;
            apiKeyStatus.textContent = '–ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!';
            apiKeyStatus.style.color = 'green';
        } else {
            apiKeyStatus.textContent = '–ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.';
            apiKeyStatus.style.color = 'red';
        }
    });

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    loadElements();
});
